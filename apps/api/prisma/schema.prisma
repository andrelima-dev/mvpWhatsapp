generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NOTE: Switched enums to plain strings for SQLite local development

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  passwordHash   String
  role           String           @default("SUPPORT_N1")
  team           String?
  isActive       Boolean          @default(true)
  messages       Message[]        @relation("AgentMessages")
  assignments    AssignmentLog[]  @relation("AssignedBy")
  assignedTo     AssignmentLog[]  @relation("AssignedTo")
  conversations  Conversation[]   @relation("AssignedConversations")
  refreshTokens  RefreshToken[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Client {
  id             String          @id @default(uuid())
  name           String
  phoneNumber    String          @unique
  tags           String?         @default("")
  conversations  Conversation[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Conversation {
  id             String           @id @default(uuid())
  externalId     String?          @unique
  client         Client           @relation(fields: [clientId], references: [id])
  clientId       String
  status         String           @default("OPEN")
  level          String           @default("N1")
  assignedTo     User?            @relation("AssignedConversations", fields: [assignedToId], references: [id])
  assignedToId   String?
  messages       Message[]
  assignmentLogs AssignmentLog[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Message {
  id              String       @id @default(uuid())
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  senderType      String
  agent           User?        @relation("AgentMessages", fields: [agentId], references: [id])
  agentId         String?
  content         String
  mediaUrl        String?
  senderLabel     String?
  providerMsgId   String?
  status          String       @default("SENT")
  sentAt          DateTime     @default(now())
  deliveredAt     DateTime?
  readAt          DateTime?
}

model AssignmentLog {
  id             String        @id @default(uuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  fromLevel      String?
  toLevel        String
  assignedBy     User          @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedById   String
  assignedTo     User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId   String?
  createdAt      DateTime      @default(now())
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}
